version: '3'
services:
  graph-node:
    image: graphprotocol/graph-node:fraction
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - '8000:8000'
      - '8001:8001'
      - '8020:8020'
      - '8030:8030'
      - '8040:8040'
    depends_on:
      - ipfs
      - postgres
    environment:
      postgres_host: postgres
      postgres_user: dbowner
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: 'ipfs:5001'
      ethereum: 'mainnet:http://host.docker.internal:8545'
      # RUST_LOG: trace
      # RUST_BACKTRACE: full

  ipfs:
    image: ipfs/go-ipfs:v0.4.23
    ports:
      - '5001:5001'
    environment:
      IPFS_PATH: /tmp

  postgres:
    image: postgres:9.6.17
    ports:
      - '5432:5432'
    command: ['postgres', '-cshared_preload_libraries=pg_stat_statements', '-cmax_connections=200']
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker-data:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_MULTIPLE_DATABASES="graph-node","explorer"
      - POSTGRES_USER=dbowner
      - POSTGRES_PASSWORD=let-me-in
      - PGDATA=/tmp

  blockscout:
    image: wighawag/blockscout:v0.0.1
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '4000:4000'
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      ETHEREUM_JSONRPC_HTTP_URL: http://host.docker.internal:8545
      ETHEREUM_JSONRPC_TRACE_URL: http://host.docker.internal:8545
      #ETHEREUM_JSONRPC_WS_URL: ws://host.docker.internal:8545
      ETHEREUM_JSONRPC_VARIANT: ganache
      DATABASE_URL: postgresql://dbowner:let-me-in@postgres:5432/explorer?ssl=false
    entrypoint: '/bin/sh -c "mix do ecto.create, ecto.migrate; mix phx.server"'
